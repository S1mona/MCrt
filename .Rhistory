installed.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
load_all()
library(MCrt)
MCcont
library(MCrt)
MCcont
MCcont
library(MCrt)
?MCcont
library(MCrt)
library(MCrt)
library(MCrt)
?MCcont
?mtcars
library(MCrt)
#' @example library(datasets)
#' @example Z <- as.matrix(mtcars)
#' @example X <- Z[,6]
#' @example X <- cbind(rep(1, length(Z[,1])), X)
#' @example Y <- Z[,1]
#' @example MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
beta_hat<-solve(t(X)%*%X)%*%t(X)%*%Y
MM<-MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
getwd
getwd()
library(devtools)
install_github("devtools","hadley")
library(devtools)
library(roxygen2)
library(MCrt)
library(MCrt)
?MCcont
library(MCrt)
?MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
rcpp_hello_world()
MCrt_rcpp_hello_world
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
debug(MCcont)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
ord
ord
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
package.skeleton()
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
Rcpp.package.skeleton("fooo")
library(MCrt)
library(MCrt)
MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
??MCrt
?MCrt
?MCcont
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
?MCcont
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
library(devtools)
library(rexygen2)
library(roxygen2)
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
mm<-MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
?MCcont
library(MCrt)
?MCcont
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(devtools)
library(roxygen2)
library(MCrt)
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",3) # for robust t-test, the range of Y is devided in 3 Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"KNN",3) # for t-test, with 3 nearest neighbors initialy assign to the generation process
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"KNN",6) # for robust t-test, with 6 nearest neighbors initialy assign to the generation process
library(devtools)
?devtools
library(MCrt)
library(MCrt)
?MCCont
?MCcont
library(MCrt)
?MCcont
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()+ scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()+ scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()
sp
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()
sp
sp + scale_color_hue(l=40, c=35)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()+ scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()
sp + scale_color_hue(l=40, c=35)
sp
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl))
sp
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()
sp
p1<-plot(rnorm(20))
p2<-plot(rnorm(20))
p3<-plot(rnorm(20))
p4<-plot(rnorm(20))
p5<-plotrnorm(20))
p5<-plot(rnorm(20))
do.call(get,paste0("p",1:n))
n<-5
do.call(get,paste0("p",1:n))
do.call(get,c(paste0("p",1:n)))
do.call(get,as.list((paste0("p",1:n))))
?do.call
p1<-plot(rnorm(20))
p2<-plot(rnorm(20))
p3<-plot(rnorm(20))
p4<-plot(rnorm(20))
p5
p5<-plot(rnorm(20))
n<-5
library("gridExtra")
?arrangeGrob
plot(arrangeGrob(p1,p2,p4,ncol=2))
plot(arrangeGrob(p1,p2,p4,p1,ncol=2))
p1<-qplot(rnorm(20))
p2<-qplot(rnorm(20))
p3<-qplot(rnorm(20))
p4<-qplot(rnorm(20))
p5<-qplot(rnorm(20))
n<-5
plot(arrangeGrob(p1,p2,p4,p1,ncol=2))
paste("p",1:4)
paste("p",1:4,sep="")
paste(paste("p",1:4,sep=""),collapse = ",")
qoute(paste(paste("p",1:4,sep=""),collapse = ","))
quote(paste(paste("p",1:4,sep=""),collapse = ","))
(paste(paste("p",1:4,sep=""),collapse = ","))
enquote(paste(paste("p",1:4,sep=""),collapse = ","))
a1<-enquote(paste(paste("p",1:4,sep=""),collapse = ","))
a1
plot(arrangeGrob(a1,ncol=2))
get(a1)
get("p1")
a1<-paste(paste("p",1:4,sep=""),collapse = ",")
get(a1)
plot(arrangeGrob(get(a1),ncol=2))
a1<-list(p1,p2,p3, p4)
plot(arrangeGrob(a1,ncol=2))
parse(a1)
a1
a1<-paste(paste("p",1:4,sep=""),collapse = ",")
parse(a1)
parse(text=a1)
a1
deparse(a1)
plot(arrangeGrob(deparse(a1),ncol=2))
expression(a1)
a1
foo <- eval(parse(text = paste("mean(x,", myoptions, ")")))
myoptions <- "trim=0, na.rm=FALSE"
foo <- eval(parse(text = paste("mean(x,", myoptions, ")")))
eval(parse(text=(paste("plot(arrangeGrob(",a1,"),ncol=2))"))))
eval(parse(text=(paste("plot(arrangeGrob(",a1,"),ncol=2))",sep=""))))
eval(parse(text=(paste("plot(arrangeGrob(",a1,"),ncol=2)",sep=""))))
i<-2
eval(parse(text=(paste("plot(arrangeGrob(",a1,"),ncol=",i,")",sep=""))))
a1<-paste(paste("p",1:4,sep=""),collapse = ",")
library(MCrt)
library(MCrt)
rm(list=ls())
library(foreign)
library(lmtest)
require(RcppDE)
require(RcppArmadillo)
require(parallel)
require(Rlab)
require(Rcpp)
require(inline)
require(foreign)
require(intpoint)
library(data.table)
sourceCpp("cpp2015.cpp")#with a demmeaning
RcppArmadillo.package.skeleton("test1")
library(RcppArmadillo)
RcppArmadillo.package.skeleton("test1")
getwd()
setwd("C:/Users/Joku/Documents")
library(RcppArmadillo)
RcppArmadillo.package.skeleton("test1")
getwd()
setwd("test1")
library(MCrt)
?MCrt
?MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test,
getwd()
library(MCrt)
?MCcont
library(MCrt)
library(MCrt)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test,
install.packages("Rcpp")
install.packages("Rcpp")
MCcont
MCrt
library(MCrt)
MCcont
cppMCcont15
library(MCrt)
MCrt:::randomizer
MCrt:::randomizer(c(1:10))
MCrt:::randomizer(1:10)
library(MCrt)
MCrt:::randomizer(1:10)
library(MCrt)
MCrt:::randomizer(1:10)
library(MCrt)
MCrt:::randomizer(1:10)
library(MCrt)
?MCcont
library(MCrt)
library(MCrt)
?MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1)
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",3)
