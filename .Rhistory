installed.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
load_all()
library(MCrt)
MCcont
library(MCrt)
MCcont
MCcont
library(MCrt)
?MCcont
library(MCrt)
library(MCrt)
library(MCrt)
?MCcont
?mtcars
library(MCrt)
#' @example library(datasets)
#' @example Z <- as.matrix(mtcars)
#' @example X <- Z[,6]
#' @example X <- cbind(rep(1, length(Z[,1])), X)
#' @example Y <- Z[,1]
#' @example MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
beta_hat<-solve(t(X)%*%X)%*%t(X)%*%Y
MM<-MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
getwd
getwd()
library(devtools)
install_github("devtools","hadley")
library(devtools)
library(roxygen2)
library(MCrt)
library(MCrt)
?MCcont
library(MCrt)
?MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
rcpp_hello_world()
MCrt_rcpp_hello_world
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
debug(MCcont)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
ord
ord
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
package.skeleton()
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
Rcpp.package.skeleton("fooo")
library(MCrt)
library(MCrt)
MCcont
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
library(datasets)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",1)
library(MCrt)
??MCrt
?MCrt
?MCcont
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
?MCcont
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(MCrt)
library(devtools)
library(rexygen2)
library(roxygen2)
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
mm<-MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
?MCcont
library(MCrt)
?MCcont
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
library(devtools)
library(roxygen2)
library(MCrt)
library(MCrt)
Z <- as.matrix(mtcars)
X <- Z[,6]
X <- cbind(rep(1, length(Z[,1])), X)
Y <- Z[,1]
#Calling method Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"Intervals",1) # for t-test, the range of Y is devided in 1 Interval
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"Intervals",3) # for robust t-test, the range of Y is devided in 3 Intervals
MCcont(X,Y, 10,40,"t",.05,0,2,10000,"KNN",3) # for t-test, with 3 nearest neighbors initialy assign to the generation process
MCcont(X,Y, 10,40,"r",.05,0,2,10000,"KNN",6) # for robust t-test, with 6 nearest neighbors initialy assign to the generation process
library(devtools)
?devtools
library(MCrt)
library(MCrt)
?MCCont
?MCcont
