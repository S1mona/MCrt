{
    "contents" : "#' Monte Carlo Simulations\n#' \n#' Calculates empirical p-value of t - or robust t - test\n#' \n#' @author RT\n#' @param x matrix of exogenous variables\n#' @param y vector of endogenous variables\n#' @param ymin lower bound of endogenous variable\n#' @param ymax upper bound of endogenous variable\n#' @param test specifies test either t - or robust t - test (\"t\" or \"r\" respectively)\n#' @param alpha significance level of the test\n#' @param betabrj supposedly true value of coefficient of interest under H_0\n#' @param j index of the coefficient of interest\n#' @param MC numeric value of Monte Carlo simulations\n#' @param method defines what method is used to generate data: either division to the \"Intervals\" or k-nearest neighbors \"KNN\"\n#' @param par in Intervals case defines in how many intervals range of Y is divided; in KNN case defines for how many nearest neighbours of each row to include in the generation process itself excluded.\n#' @return empirical p-value\n#' @examples\n#' library(datasets)\n#'  Z <- as.matrix(mtcars)\n#'  X <- Z[,6]\n#'  X <- cbind(rep(1, length(Z[,1])), X)\n#'  Y <- Z[,1]\n#'  #Calling method Intervals\n#'  MCcont(X,Y, 10,40,\"t\",.05,0,2,10000,\"Intervals\",1) # for t-test, the range of Y is devided in 1 Interval\n#'  MCcont(X,Y, 10,40,\"r\",.05,0,2,10000,\"Intervals\",3) # for robust t-test, the range of Y is devided in 3 Intervals\n#'  ##Calling method KNN\n#'  MCcont(X,Y, 10,40,\"t\",.05,0,2,10000,\"KNN\",3) # for t-test, with 3 nearest neighbors initialy assign to the generation process\n#'  MCcont(X,Y, 10,40,\"r\",.05,0,2,10000,\"KNN\",6) # for robust t-test, with 6 nearest neighbors initialy assign to the generation process\n#' @export\n#' @useDynLib MCrt\nMCcont<-function(x,y, ymin,ymax,test,alpha,betabarj,j,MC,method,par){\n  #knn number of neighbors\n  beta_hat<-solve(t(x)%*%x)%*%t(x)%*%y\n  #rearnaging X and Y in a way that data are ordered accordingly to the values of a vector X*beta_hat increasingly\n  ord<-order(X%*%beta_hat)\n  X<-X[ord,]\n  Y<-Y[ord]\n  ## end of reordering\n  tstat<-cppMCcont15(x,y,par,test,betabarj,j,MC, ymin,ymax,method)\n  \n  XROWS<-nrow(x)\n  XCOLS<-ncol(x)\n  if(length(tstat)<MC){\n    cat(paste(\"Ups.. An error occured: There was at least one row for which it was unable to find more than one similar and feasible row with given parameters\"))\n  }\n  else{\n  #calculates emprical p-value from the t-statistics generated in C++ code\n  emp_p<-sum(abs(tstat)>=qt(1-(alpha/2), df=(XROWS-XCOLS)))/MC \n    \n  #cat(paste(\"Empirical p-value calculated with \",MC,\" MC simulations: \", \"\\n\", sep=\"\"))\n  #cat(paste(\"                                                 t-test \",emp_p[1], \"\\n\", sep=\"\"))\n  #cat(paste(\"                                                 robust t-test \",emp_p[2], \"\\n\", sep=\"\"))\n  testw<-switch(test, t=\"t-test\",r=\"robust t-test\")\n  Met<-switch(method, KNN=\"Data was generated using k-nearest neighbors method\",Intervals=\"Data was generated using the division into the equal intervals of Y method\")\n  cat(paste(\"Empirical p-value for \",testw,\" calculated with \",MC,\" MC simulations : \", emp_p[1], \"\\n\", sep=\"\"))\n  cat(paste(Met,\"\\n\"))\n  emp_p}\n}\n\n",
    "created" : 1455135916768.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2973778663",
    "id" : "9C69D5FC",
    "lastKnownWriteTime" : 1455216552,
    "path" : "~/Dropbox/MC_bootstrapping/MCrt/R/00output.R",
    "project_path" : "R/00output.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}